// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String        @id @default(uuid())
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  username              String        @unique @db.VarChar(50)
  intra_name            String        @unique @db.VarChar(50)
  first_name            String?       @db.VarChar(50)
  last_name             String?       @db.VarChar(50)
  avatar                String?       @db.VarChar(255)
  two_factor_auth       Boolean       @default(false)
  two_factor_auth_key   String?       @db.VarChar(255)
  two_factor_auth_uri   String?       @db.VarChar(255)
  code_verified         Boolean       @default(false)
  friends               User[]        @relation("Friends")
  friendsRelations      User[]        @relation("Friends")
  blockedUsers          User[]        @relation("BlockedUsers")
  blockedUsersRelations User[]        @relation("BlockedUsers")
  roomMemberships       RoomUser[]
  wonGames              GameHistory[] @relation("Winner")
  lostGame              GameHistory[] @relation("Loser")
}

model GameHistory {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  gameId      String   @unique
  winner      User     @relation(name: "Winner", fields: [winnerId], references: [id])
  winnerId    String
  loser       User     @relation(name: "Loser", fields: [loserId], references: [id])
  loserId     String
  winnerScore Int
  loserScore  Int
}

model RoomUser {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  role      RoomRole       @default(MEMBER)
  status    RoomUserStatus @default(NORMAL)
  hasRead   Boolean        @default(false)
  room      Room           @relation(fields: [roomId], references: [id])
  roomId    String
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  messages  Message[]
}

model Room {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String?     @db.VarChar(255)
  image     String?     @db.VarChar(255)
  password  String?     @db.VarChar(255)
  privacy   RoomPrivacy @default(PUBLIC)
  isDm      Boolean     @default(false)
  members   RoomUser[]
  messages  Message[]
}

enum RoomPrivacy {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum RoomRole {
  OWNER
  ADMIN
  MEMBER
}

enum RoomUserStatus {
  NORMAL
  BANNED
  MUTED
  LEFT
}

model Message {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  message    String
  room       Room     @relation(fields: [roomId], references: [id])
  roomId     String
  roomUser   RoomUser @relation(fields: [roomUserId], references: [id])
  roomUserId String
}